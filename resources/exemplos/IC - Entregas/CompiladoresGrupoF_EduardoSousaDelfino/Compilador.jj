options {
STATIC = false ;
}
PARSER_BEGIN(Compilador)
	import java.io.*;
	class Compilador {
		final static String Version = "Compilador X+++ - Versao 1.0 - 2017";
		boolean Menosshort = false; // saída resumida = falso
		
		public static void main( String[] args ) throws ParseException, TokenMgrError {
			String filename = "";
			Compilador parser;
			int i;
			boolean ms = false;
			System.out.println(Version);
			
			for (i = 0; i < args.length - 1; i++){
				if ( args[i].toLowerCase().equals("-short") )
					ms = true;
				else {
					System.out.println("Uso: java langX [-short] arquivo");
					System.exit(0);
				}
			}
			
			if (args[i].equals("-")){       // lê da entrada padrão      
				System.out.println("Lendo da entrada padrao . . .");
				parser = new Compilador(System.in);
			} else {       // lê do arquivo
				filename = args[args.length-1];  
				System.out.println("Lendo do arquivo " + filename + " . . .");
				try {
					parser = new Compilador(new java.io.FileInputStream(filename));
				} catch (java.io.FileNotFoundException e) {
					System.out.println("Arquivo " + filename + " nao encontrado.");
					return;
				}
			}
			
			parser.Menosshort = ms;
			parser.program();   // chama o método que faz a análise
			if ( parser.token_source.foundLexError() != 0 ) // verifica se houve erro léxico
				System.out.println(parser.token_source.foundLexError() + " erros lexicos encontrados");
			else
				System.out.println("Programa analisado com sucesso.");
		}
		
		static public String im(int x){
			int k;
			String s;
			s = tokenImage[x];
			k = s.lastIndexOf("\"");
			try {
				s = s.substring(1,k);
			} catch (StringIndexOutOfBoundsException e){
				
			}
		return s;
	}
}

PARSER_END(Compilador)

TOKEN_MGR_DECLS :
{
	int countLexError = 0;
	public int foundLexError(){
		return countLexError;
	}

}

/* Espaços a serem desprezados no início de cada token */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* Cometários */

TOKEN :
{  
  < lineComment: "//" (~["\r"])*( <LETTER> | <DIGIT> )* >
| < blockComment: "/*" (~["\r"])*( <LETTER> | <DIGIT> | "\n" | "\r" | " ")* "*/">

}

/* Palavras reservadas */

TOKEN :
{
  < BREAK: "break" >
| < CASE: "case" >
| < CLASS: "class" >
| < CONSTRUCTOR: "constructor" >
| < DFAULT: "default" >
| < DO: "do" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FOR: "for" >
| < IF: "if" >
| < NEW: "new" >
| < PRINT: "print" >
| < READ: "read" >
| < RETURN: "return" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < WHILE: "while" >
}

/* Tipos Primitivos */

TOKEN :
{
  < primitivetype: "int" | "string" | "char" | "boolean" | "double" | "float" >
}

/* constantes */

TOKEN :
{
  < int_constant : (  // números decimais, octais, hexadecimais ou binários
                  (["0"-"9"] (["0"-"9"])* ["d", "D"] ) | 
                  (["0"-"7"] (["0"-"7"])* ["o", "O"] ) |
                  (["0"-"9"] (["0"-"7","A"-"F","a"-"f"])* ["h", "H"] ) |
                  (["0"-"1"] (["0"-"1"])* ["b", "B"])
                 ) >
|

  < stringLiteral : "\"" ( <LETTER> | <DIGIT> )* "\"" > // cadeias de letras e numeros exclusivamente
|
  < string_constant : "\""( ~["\"","\n","\r"])* "\"" > // constante string com letras, numeros e simbolos   
|
  < null_constant: "null" > // constante null
| 
  < intLiteral 	: <DIGIT> (<DIGIT>)* > // apenas numeros
|
  < floatLiteral :  <intLiteral> "." ( <intLiteral> | <intLiteral> ( "e" | "E" )? ("-")? <intLiteral> )? |	
		   (<intLiteral>)? "." ( <intLiteral> | <intLiteral> ( "e" | "E" )? ("-")? <intLiteral> ) >

}

/* Identificadores */

TOKEN :
{
  < IDENT : <LETTER> (<LETTER>|<DIGIT>|<UNDERLINE>)* >
|
  < LETTER : ["A"-"Z","a"-"z"] >
|
  < DIGIT : ["0"-"9"] >
}

/* Símbolos especiais */

TOKEN :
{
  < LPAREN : ["("] >
| < RPAREN : [")"] >
| < LBRACE : ["{"] >
| < RBRACE : ["}"] >
| < LBRACKET : ["["] >
| < RBRACKET : ["]"] >
| < COLON : [":"] >
| < SEMICOLON : [";"] >
| < COMMA : [","] >
| < DOT : ["."] >
| < UNDERLINE : ["_"] >
}

/* Operadores */

TOKEN :
{
  < ASSIGN : ["="] >
| < GT : [">"] >
| < LT : ["<"] >
| < EQ : ("=""=") >
| < LE : ("<""=") >
| < GE : (">""=") >
| < NEQ : ("!""=") >
| < PLUS : ["+"] >
| < MINUS : ["-"] >
| < STAR : ["*"] >
| < SLASH : ["/"] >
| < REM : ["%"] >
}

/* Trata os erros léxicos */
SPECIAL_TOKEN :
{
<INVALID_LEXICAL: 
(~ ["a"-"z", "A"-"Z",
  "0"-"9",
  "\"",
  "(",
  ")",
  "[",
  "]",
  "{",
  "}",
  ";",
  ",",
  ".",
  "=",
  ">",
  "<",
  "!",
  "+",
  "-",
  "*",
  "/",
  "%",
  " ",
  "\t",
  "\n",
  "\r",
  "\f"
])+>
   {
    System.err.println("Linha " + input_stream.getEndLine() + 
                           " - String invalido encontrado: " + image);
    countLexError++;
   }
|
   <INVALID_CONST: 
   "\"" (~ ["\n","\r","\""])* ["\n","\r"]>
   {
    System.err.println("Linha " + input_stream.getEndLine() + 
                           " - String constant has a \\n: " + image);
    countLexError++;
   }

}

JAVACODE void program()
{
Token t;
    do
    {
    t = getNextToken();
    Token st = t;
        while ( st.specialToken != null)
        st = st.specialToken;
        do {
           if ( Menosshort )
          System.out.println(st.image + "  " + 
                                 im(st.kind) + " " +
                                 st.kind);
           else
              System.out.println("Linha: " + st.beginLine + 
                                 " Coluna: " + st.beginColumn + 
                                 " " + st.image +
                                 "  " + im(st.kind) + "  "+t.kind);
          st = st.next;       
        } while (st != t.next);
    } while (t.kind != CompiladorConstants.EOF);  
}
