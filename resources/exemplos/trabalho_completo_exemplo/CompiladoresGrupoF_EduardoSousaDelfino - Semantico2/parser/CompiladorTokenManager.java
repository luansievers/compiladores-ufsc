/* CompiladorTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. CompiladorTokenManager.java */
package parser;
import java.io.*;
import recovery.*;
                     // importa as classes de recuperação de erros do AS
        import syntacticTree.*;
                        // importa as classes dos nós da árvore sintática
        import semanalysis.*;

/** Token Manager. */
@SuppressWarnings("unused")public class CompiladorTokenManager implements CompiladorConstants {
        int countLexError = 0;
        public int foundLexError(){
                return countLexError;
        }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 35;
            return 66;
         }
         if ((active0 & 0x800000000000000L) != 0L)
            return 55;
         if ((active0 & 0x3000L) != 0L)
         {
            jjmatchedKind = 35;
            return 24;
         }
         if ((active0 & 0xc00000L) != 0L)
         {
            jjmatchedKind = 35;
            return 7;
         }
         if ((active0 & 0x1100000000000L) != 0L)
            return 43;
         if ((active0 & 0xe00L) != 0L)
         {
            jjmatchedKind = 35;
            return 11;
         }
         if ((active0 & 0x213cc000L) != 0L)
         {
            jjmatchedKind = 35;
            return 42;
         }
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 35;
            return 18;
         }
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 35;
            return 1;
         }
         return -1;
      case 1:
         if ((active0 & 0x21fddf00L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 1;
            return 42;
         }
         if ((active0 & 0x2000L) != 0L)
            return 23;
         if ((active0 & 0x20000L) != 0L)
            return 42;
         return -1;
      case 2:
         if ((active0 & 0x21f8df00L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 2;
            return 42;
         }
         if ((active0 & 0x50000L) != 0L)
            return 42;
         return -1;
      case 3:
         if ((active0 & 0x20104200L) != 0L)
            return 42;
         if ((active0 & 0x1e89d00L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 3;
            return 42;
         }
         return -1;
      case 4:
         if ((active0 & 0xa09800L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 4;
            return 42;
         }
         if ((active0 & 0x1480500L) != 0L)
            return 42;
         return -1;
      case 5:
         if ((active0 & 0x9800L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 5;
            return 42;
         }
         if ((active0 & 0xa00000L) != 0L)
            return 42;
         return -1;
      case 6:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 6;
            return 42;
         }
         if ((active0 & 0x9000L) != 0L)
            return 42;
         return -1;
      case 7:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 7;
            return 42;
         }
         return -1;
      case 8:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 8;
            return 42;
         }
         return -1;
      case 9:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 9;
            return 42;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L);
      case 37:
         return jjStopAtPos(0, 60);
      case 40:
         return jjStopAtPos(0, 38);
      case 41:
         return jjStopAtPos(0, 39);
      case 42:
         return jjStopAtPos(0, 58);
      case 43:
         return jjStopAtPos(0, 56);
      case 44:
         return jjStopAtPos(0, 46);
      case 45:
         return jjStopAtPos(0, 57);
      case 46:
         return jjStopAtPos(0, 47);
      case 47:
         return jjStartNfaWithStates_0(0, 59, 55);
      case 58:
         return jjStartNfaWithStates_0(0, 44, 43);
      case 59:
         return jjStopAtPos(0, 45);
      case 60:
         jjmatchedKind = 51;
         return jjMoveStringLiteralDfa1_0(0x20000000000000L);
      case 61:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x10000000000000L);
      case 62:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_0(0x40000000000000L);
      case 91:
         return jjStopAtPos(0, 42);
      case 93:
         return jjStopAtPos(0, 43);
      case 95:
         return jjStartNfaWithStates_0(0, 48, 43);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xe00L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x3000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0xc000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x20040000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x300000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0xc00000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 123:
         return jjStopAtPos(0, 40);
      case 125:
         return jjStopAtPos(0, 41);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x341000L);
      case 102:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(1, 17, 42);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x4400L);
      case 111:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(1, 13, 23);
         return jjMoveStringLiteralDfa2_0(active0, 0x10800L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x80100L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x20400000L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x100400L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1880000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 114:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 16, 42);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x4200L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x208000L);
      case 119:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 18, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1100L);
      case 100:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 42);
         break;
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 42);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x408000L);
      case 108:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0xc00L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 42);
         break;
      case 107:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 42);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 114:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 115:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 42);
         break;
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 104:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 42);
         break;
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 42);
         break;
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 15, 42);
         break;
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 42);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 114:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(10, 11, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 97;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x84000058ffffc9ffL & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     { jjCheckNAdd(43); }
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     { jjCheckNAddStates(0, 4); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(5, 10); }
                  else if (curChar == 47)
                     { jjAddStates(11, 12); }
                  else if (curChar == 39)
                     { jjCheckNAdd(27); }
                  if (curChar == 48)
                     { jjAddStates(13, 16); }
                  break;
               case 7:
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAdd(42); }
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAdd(42); }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAdd(42); }
                  break;
               case 55:
                  if (curChar == 42)
                     { jjCheckNAddStates(17, 19); }
                  else if (curChar == 47)
                  {
                     if (kind > 6)
                        kind = 6;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAdd(42); }
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAdd(42); }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAdd(42); }
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAdd(42); }
                  break;
               case 26:
                  if (curChar == 39)
                     { jjCheckNAdd(27); }
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(27, 28); }
                  break;
               case 28:
                  if (curChar == 39 && kind > 32)
                     kind = 32;
                  break;
               case 43:
                  if ((0x84000058ffffc9ffL & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  { jjCheckNAdd(43); }
                  break;
               case 44:
                  if (curChar == 48)
                     { jjAddStates(13, 16); }
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  { jjCheckNAdd(51); }
                  break;
               case 51:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  { jjCheckNAdd(51); }
                  break;
               case 53:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 54:
                  if (curChar == 47)
                     { jjAddStates(11, 12); }
                  break;
               case 56:
                  if ((0xffffffffffffdfffL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAddTwoStates(56, 57); }
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAdd(57); }
                  break;
               case 58:
                  if (curChar == 42)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 59:
                  if ((0xffffffffffffdfffL & l) != 0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 60:
                  if ((0x3ff000100002400L & l) != 0L)
                     { jjCheckNAddTwoStates(60, 62); }
                  break;
               case 61:
                  if (curChar == 47 && kind > 7)
                     kind = 7;
                  break;
               case 62:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 70:
                  if (curChar == 34)
                     { jjCheckNAddStates(5, 10); }
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(71, 72); }
                  break;
               case 72:
                  if (curChar == 34 && kind > 27)
                     kind = 27;
                  break;
               case 73:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(73, 74); }
                  break;
               case 74:
                  if (curChar == 34 && kind > 28)
                     kind = 28;
                  break;
               case 75:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(75, 76); }
                  break;
               case 76:
                  if ((0x2400L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  { jjCheckNAddStates(0, 4); }
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  { jjCheckNAdd(78); }
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(79, 80); }
                  break;
               case 80:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(81, 82); }
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(20, 24); }
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(83, 81); }
                  break;
               case 85:
                  if (curChar == 45)
                     { jjCheckNAdd(86); }
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(86, 81); }
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(25, 29); }
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(88, 89); }
                  break;
               case 89:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(90, 91); }
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(30, 34); }
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(92, 90); }
                  break;
               case 94:
                  if (curChar == 45)
                     { jjCheckNAdd(95); }
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(95, 90); }
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(35, 39); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     { jjCheckNAdd(42); }
                  }
                  else if ((0xd0000001d0000001L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 102)
                     { jjAddStates(40, 41); }
                  else if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 39;
                  else if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 35;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 31;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     { jjCheckNAdd(42); }
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     { jjCheckNAdd(42); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     { jjCheckNAdd(42); }
                  }
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 23:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     { jjCheckNAdd(42); }
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 66:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     { jjCheckNAdd(42); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 68;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     { jjCheckNAdd(42); }
                  }
                  if (curChar == 110)
                     { jjCheckNAdd(0); }
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     { jjCheckNAdd(42); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 0:
                  if (curChar == 116 && kind > 25)
                     kind = 25;
                  break;
               case 3:
                  if (curChar == 103 && kind > 25)
                     kind = 25;
                  break;
               case 4:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 8:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 114 && kind > 25)
                     kind = 25;
                  break;
               case 10:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 110 && kind > 25)
                     kind = 25;
                  break;
               case 14:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 19:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 101 && kind > 25)
                     kind = 25;
                  break;
               case 21:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 25:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 27:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjAddStates(42, 43); }
                  break;
               case 29:
                  if (curChar == 101 && kind > 34)
                     kind = 34;
                  break;
               case 30:
                  if (curChar == 117)
                     { jjCheckNAdd(29); }
                  break;
               case 31:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 69 && kind > 34)
                     kind = 34;
                  break;
               case 34:
                  if (curChar == 85)
                     { jjCheckNAdd(33); }
                  break;
               case 35:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 83)
                     { jjCheckNAdd(33); }
                  break;
               case 38:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAdd(42); }
                  break;
               case 42:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAdd(42); }
                  break;
               case 43:
                  if ((0xd0000001d0000001L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  { jjCheckNAdd(43); }
                  break;
               case 45:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 47:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 49:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 51:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 52:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 56:
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAddTwoStates(56, 57); }
                  break;
               case 57:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAdd(57); }
                  break;
               case 59:
                  { jjCheckNAddStates(17, 19); }
                  break;
               case 60:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(60, 62); }
                  break;
               case 63:
                  if (curChar == 102)
                     { jjAddStates(40, 41); }
                  break;
               case 64:
                  if (curChar == 97)
                     { jjCheckNAdd(0); }
                  break;
               case 65:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 67:
                  if (curChar == 115)
                     { jjCheckNAdd(29); }
                  break;
               case 68:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 71:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjAddStates(44, 45); }
                  break;
               case 73:
                  { jjAddStates(46, 47); }
                  break;
               case 75:
                  { jjAddStates(48, 49); }
                  break;
               case 81:
                  if ((0x4000000040L & l) != 0L && kind > 31)
                     kind = 31;
                  break;
               case 84:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(50, 51); }
                  break;
               case 90:
                  if ((0x1000000010L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 93:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(52, 53); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 43:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  { jjCheckNAdd(43); }
                  break;
               case 56:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjAddStates(54, 55); }
                  break;
               case 59:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(17, 19); }
                  break;
               case 73:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(46, 47); }
                  break;
               case 75:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(48, 49); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 97 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   78, 79, 80, 88, 89, 71, 72, 73, 74, 75, 76, 55, 58, 45, 47, 49, 
   52, 59, 60, 62, 83, 84, 85, 81, 87, 84, 85, 86, 81, 87, 92, 93, 
   94, 90, 96, 93, 94, 95, 90, 96, 66, 69, 27, 28, 71, 72, 73, 74, 
   75, 76, 85, 86, 94, 95, 56, 57, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\142\162\145\141\153", 
"\143\141\163\145", "\143\154\141\163\163", "\143\157\156\163\164\162\165\143\164\157\162", 
"\144\145\146\141\165\154\164", "\144\157", "\145\154\163\145", "\145\170\164\145\156\144\163", 
"\146\157\162", "\151\146", "\156\145\167", "\160\162\151\156\164", "\162\145\141\144", 
"\162\145\164\165\162\156", "\163\165\160\145\162", "\163\167\151\164\143\150", "\167\150\151\154\145", 
null, null, null, null, "\156\165\154\154", null, null, null, null, null, null, null, 
null, "\50", "\51", "\173", "\175", "\133", "\135", "\72", "\73", "\54", "\56", 
"\137", "\75", "\76", "\74", "\75\75", "\74\75", "\76\75", "\41\75", "\53", "\55", 
"\52", "\57", "\45", null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
            SkipLexicalActions(matchedToken);
         }
         else
            SkipLexicalActions(null);
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 61 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    System.err.println("Linha " + input_stream.getEndLine() +
                           " - String invalido encontrado: " + image);
    countLexError++;
         break;
      case 62 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    System.err.println("Line " + input_stream.getEndLine() +
                           " - String constant has a \u005c\u005cn: " + image);
    countLexError++;
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public CompiladorTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public CompiladorTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 97; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x1fffffcfffffff01L, 
};
static final long[] jjtoSkip = {
   0x60000000000000feL, 
};
static final long[] jjtoSpecial = {
   0x6000000000000000L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[97];
    private final int[] jjstateSet = new int[2 * 97];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    
    protected char curChar;
}
