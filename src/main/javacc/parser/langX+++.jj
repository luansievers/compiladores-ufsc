options {
  STATIC = false;
}

PARSER_BEGIN(langX)
package parser;

import java.io.*;

public class langX {

    final static String Version = "X+++ Language Parser - INE5622 2019.1";
    boolean Menosshort = false;

    public static void main(String args[]) throws ParseException {
        String filename = "";
        langX parser;
        int i;
        boolean ms = false;

        System.out.println(Version);

        for (i = 0; i < args.length - 1; i++) {
            if (args[i].toLowerCase().equals("-short")) {
                ms = true;
            } else {
                System.out.println("Usage is: java langX [-short] inputfile");
                System.exit(0);
            }
        }

        if (args[i].equals("-")) {
            System.out.println("Reading from standard input . . .");
            parser = new langX(System.in);
        } else {
            filename = args[args.length - 1];
            System.out.println("Reading from file " + filename + " . . .");
            try {
                parser = new langX(new java.io.FileInputStream(filename));
            } catch (java.io.FileNotFoundException e) {
                System.out.println("File " + filename + " not found.");
                return;
            }
        }

        parser.Menosshort = ms;
        parser.program();

        if (parser.token_source.foundLexError() != 0) {
            System.out.println(parser.token_source.foundLexError() + " Lexical Errors found");
        } else {
            System.out.println("Program successfully analyzed.");
        }
    }

    static public String im(int x) {
        int k;
        String s;
        s = tokenImage[x];
        k = s.lastIndexOf("\"");
        try {
            s = s.substring(1, k);
        } catch (StringIndexOutOfBoundsException e) {
        }
        return s;
    }

}
PARSER_END(langX)

TOKEN_MGR_DECLS : {
    int countLexError = 0;
    public int foundLexError() {
        return countLexError;
    }
}

/* Espaços a serem desprezados no início de cada token */
SKIP : {
    " " |
    "\t" |
    "\n" |
    "\r" |
    "\f"
}

SKIP : {
    "/*" : multilinecomment
}

SKIP : {
    "//" : singlelinecomment
}

<multilinecomment> SKIP: {
    "*/" : DEFAULT | <~[]>
}

<singlelinecomment> SKIP: {
    <["\n","\r"]> : DEFAULT | <~[]>
}

/* Palavras reservadas */
TOKEN : {
    < BREAK: "break" > |
    < CLASS: "class" > |
    < CONSTRUCTOR: "constructor" > |
    < ELSE: "else" > |
    < EXTENDS: "extends" > |
    < FOR: "for" > |
    < IF: "if" > |
    < INT: "int" > |
    < NEW: "new" > |
    < PRINT: "print" > |
    < READ: "read" > |
    < RETURN: "return" > |
    < STRING: "string" > |
    < SUPER: "super" >
}

/* constantes */
TOKEN : {
    // números decimais, octais, hexadecimais ou binários
    < int_constant:(  
        (["0"-"9"] (["0"-"9"])* ) |
        (["0"-"7"] (["0"-"7"])* ["o", "O"] ) |
        (["0"-"9"] (["0"-"7","A"-"F","a"-"f"])* ["h", "H"] ) |
        (["0"-"1"] (["0"-"1"])* ["b", "B"])
    ) > |
    // constante string como "abcd bcda"
    < string_constant: "\""( ~["\"","\n","\r"])* "\"" > |
    // constante null
    < null_constant: "null" >
}

/* Identificadores */
TOKEN : {
    < IDENT: <LETTER> (<LETTER>|<DIGIT>)* > |
    < #LETTER:["A"-"Z","a"-"z"] > |
    < #DIGIT:["0"-"9"] >
}

/* Símbolos especiais */
TOKEN : {
    < LPAREN: "(" > |
    < RPAREN: ")" > |
    < LBRACE: "{" > |
    < RBRACE: "}" > |
    < LBRACKET: "[" > |
    < RBRACKET: "]" > |
    < SEMICOLON: ";" > |
    < COMMA: "," > |
    < DOT: "." >
}

/* Operadores */
TOKEN : {
    < ASSIGN: "=" > |
    < GT: ">" > |
    < LT: "<" > |
    < EQ: "==" > |
    < LE: "<=" > |
    < GE: ">=" > |
    < NEQ: "!=" > |
    < PLUS: "+" > |
    < MINUS: "-" > |
    < STAR: "*" > |
    < SLASH: "/" > |
    < REM: "%" >
}

/* Trata os erros léxicos */
SPECIAL_TOKEN : {
    <INVALID_LEXICAL:
    (~ ["a"-"z", "A"-"Z",
    "0"-"9",
    "\"",
    "(",
    ")",
    "[",
    "]",
    "{",
    "}",
    ";",
    ",",
    ".",
    "=",
    ">",
    "<",
    "!",
    "+",
    "-",
    "*",
    "/",
    "%",
    " ",
    "\t",
    "\n",
    "\r",
    "\f"
    ])+>
    {
        System.err.println("Line " + input_stream.getEndLine() +
                           " - Invalid string found: " + image);
        countLexError++;
    } |
    <INVALID_CONST: "\"" (~ ["\n","\r","\""])* ["\n","\r"]>
    {
        System.err.println("Line " + input_stream.getEndLine() +
                           " - String constant has a \\n: " + image);
        countLexError++;
    }

}

JAVACODE void program() {
    Token t;
    do {
        t = getNextToken();
        Token st = t;
        while (st.specialToken != null) {
            st = st.specialToken;
        }
        do {
            if (Menosshort) {
                System.out.println(st.image + "  " + im(st.kind) + " " + st.kind);
            } else {
                System.out.println("Line: " + st.beginLine + " Column: " + st.beginColumn + " "
                        + st.image + "  " + im(st.kind) + "  " + t.kind);
                st = st.next;
            }
        } while (st != t.next);
    } while (t.kind != langXConstants.EOF);
}